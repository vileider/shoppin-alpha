[{"C:\\testy-react\\shoppin-alpha\\src\\index.js":"1","C:\\testy-react\\shoppin-alpha\\src\\components\\bottom-links.js":"2","C:\\testy-react\\shoppin-alpha\\src\\App.js":"3","C:\\testy-react\\shoppin-alpha\\src\\components\\dinner.js":"4","C:\\testy-react\\shoppin-alpha\\src\\reportWebVitals.js":"5","C:\\testy-react\\shoppin-alpha\\src\\components\\PickingPanel.js":"6","C:\\testy-react\\shoppin-alpha\\src\\components\\basket.js":"7","C:\\testy-react\\shoppin-alpha\\src\\components\\GenerateSetOfItems.js":"8"},{"size":500,"mtime":1607431996065,"results":"9","hashOfConfig":"10"},{"size":283,"mtime":1606903567294,"results":"11","hashOfConfig":"10"},{"size":334,"mtime":1612140264786,"results":"12","hashOfConfig":"10"},{"size":4592,"mtime":1613492686477,"results":"13","hashOfConfig":"10"},{"size":362,"mtime":1603804872000,"results":"14","hashOfConfig":"10"},{"size":6100,"mtime":1614262834416,"results":"15","hashOfConfig":"10"},{"size":1548,"mtime":1613680733835,"results":"16","hashOfConfig":"10"},{"size":3760,"mtime":1612915253367,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1f65v13",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\testy-react\\shoppin-alpha\\src\\index.js",[],["37","38"],"C:\\testy-react\\shoppin-alpha\\src\\components\\bottom-links.js",[],"C:\\testy-react\\shoppin-alpha\\src\\App.js",[],"C:\\testy-react\\shoppin-alpha\\src\\components\\dinner.js",[],"C:\\testy-react\\shoppin-alpha\\src\\reportWebVitals.js",[],"C:\\testy-react\\shoppin-alpha\\src\\components\\PickingPanel.js",["39"],"import React from 'react';\r\nimport './PickingPanel.css'\r\nimport { useState } from 'react';\r\nimport { GenerateSetOfItems } from './GenerateSetOfItems';\r\nimport { Dinner } from './dinner';\r\n// import vegAndFruitImage from '../images/veg-fruit.png'\r\nimport chemicalsImage from '../images/chemicals.png'\r\n// import dinners from '../images/dinners.png'\r\nimport './GenerateSetOfItems.css';\r\nimport { Basket } from './basket';\r\n// let tempdata = require('./vegAndFruitDatabase.json')\r\n\r\nconst PickingPanel = function () {\r\n    const [vegAndFruitTransmitedData, setVegAndFruitTransmitedData] = useState()\r\n    const [mainButtonContentVisibilityCheck,\r\n        setMainButtonContentVisibilityCheck] = useState([{\r\n            vegAndFruit: false,\r\n            chemicals: false,\r\n            dinners: false\r\n\r\n        }]\r\n        )\r\n    const [chemicalTransmitedData, setChemicalTransmitedData] = useState()\r\n    const [dinnerTransmitedData, setDinnerTransmitedData] = useState()\r\n    const resetServer = () => {\r\n        console.log('i am reseting the server');\r\n        fetch('http://localhost:8000/reset/vAF')\r\n            .then(response => response.text()\r\n                .then(data => console.log(data)))\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n    const imgUrlGenerator = (props) => {\r\n        return require('../images/' + props + '.png').default;\r\n    }\r\n\r\n    const mainButtonClick = async (e, visibility) => {\r\n        let alternativeNameInPromise = new Promise((resolve, reject) => {\r\n            resolve(e.target.alt)\r\n        })\r\n        await alternativeNameInPromise.then(value => {\r\n            setMainButtonContentVisibilityCheck(\r\n                mainButtonContentVisibilityCheck.map(x => {\r\n                    console.log('odpalane', visibility)\r\n                    x[value] = visibility\r\n                    return x\r\n                })\r\n            )\r\n        })\r\n    }\r\n\r\n    const mainTopicButton = (imageSource, altName,) => {\r\n        return (\r\n            <button className='mainButtonContent' onTouchStart={(e) => { mainButtonClick(e, true) }}>\r\n                <img src={imageSource} alt={altName} />\r\n            </button>\r\n        )\r\n    }\r\n    const mainTopicFoldButton = (imageSource, altName,) => {\r\n        return (\r\n            <button className='mainButtonContent' onTouchStart={(e) => { mainButtonClick(e, false) }}>\r\n                <img src={imageSource} alt={altName} />\r\n            </button>\r\n        )\r\n    }\r\n\r\n    const dataAvailabilityCheck = () => {\r\n        const sourceArray = [\r\n            vegAndFruitTransmitedData,\r\n            chemicalTransmitedData\r\n        ]\r\n        let combinedArrays = []\r\n        sourceArray.filter(x => Array.isArray(x))\r\n            .forEach(y => combinedArrays = combinedArrays.concat(y))\r\n        if (dinnerTransmitedData) {\r\n            try {\r\n                if (combinedArrays.length > 0) {\r\n                    const dinnerIngredients = dinnerTransmitedData\r\n                        .map(x => x.ingredientsDeveloped).flat(1)\r\n                    combinedArrays = combinedArrays.map(x => {\r\n                        dinnerIngredients.forEach(y => {\r\n                            if (x.product === y.product) {\r\n                                if (y.visibilityOnProductList === false) {\r\n                                    x.count++\r\n                                    y.visibilityOnProductList = true\r\n                                }\r\n                                x.visibilityOnProductList = false\r\n                            }\r\n                        })\r\n                        return x\r\n                    })\r\n                }\r\n                if (combinedArrays.length === 0) {\r\n                    dinnerTransmitedData\r\n                        .map(x => combinedArrays.push(x.ingredientsDeveloped))\r\n                    return combinedArrays.flat(1)\r\n                }\r\n            } catch (e) {\r\n                console.warn('array combining process has been interupted')\r\n            }\r\n        }\r\n        return combinedArrays\r\n    }\r\n\r\n    const MainTopicPanelSet = (<>\r\n        <div className='masterProductContainer'>\r\n            <button className='resetButton' onClick={() => { resetServer() }}> reset server</button>\r\n            <div className=\"productOnListObject\">{\r\n                mainButtonContentVisibilityCheck[0].vegAndFruit ?\r\n                    <>\r\n                        <GenerateSetOfItems liftedChildState={setVegAndFruitTransmitedData}\r\n                            setOfItemData={vegAndFruitTransmitedData}\r\n                            endpoint={'http://localhost:8000/vegAndFruit'} />\r\n                        {mainTopicFoldButton('vegAndFruitFold', 'vegAndFruit')}</>\r\n                    : mainTopicButton(imgUrlGenerator('veg-fruit'), 'vegAndFruit')\r\n            }\r\n                {\r\n                    mainButtonContentVisibilityCheck[0].chemicals ?\r\n                        <>\r\n                            <GenerateSetOfItems liftedChildState={setChemicalTransmitedData}\r\n                                setOfItemData={chemicalTransmitedData}\r\n                                endpoint={'http://localhost:8000/chemicals'} />\r\n                            {mainTopicFoldButton('chamicalsFold', 'chemicals')}</>\r\n                        : mainTopicButton(imgUrlGenerator('chemicals'), 'chemicals')\r\n                }\r\n                {\r\n                    mainButtonContentVisibilityCheck[0].dinners ?\r\n                        <>\r\n                            <Dinner liftedChildState={setDinnerTransmitedData}\r\n                                setOfItemData={dinnerTransmitedData}\r\n                                endpoint={'http://localhost:8000/dinners'} />\r\n                            {mainTopicFoldButton('dinnersFold', 'dinners')}</>\r\n                        : mainTopicButton(imgUrlGenerator('dinners'), 'dinners')\r\n                }\r\n            </div>\r\n            <>\r\n                <Basket dataFromParent={dataAvailabilityCheck()} />\r\n            </>\r\n        </div>\r\n    </>\r\n    )\r\n\r\n    return MainTopicPanelSet;\r\n\r\n}\r\nexport default PickingPanel;","C:\\testy-react\\shoppin-alpha\\src\\components\\basket.js",[],["40","41"],"C:\\testy-react\\shoppin-alpha\\src\\components\\GenerateSetOfItems.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":7,"column":8,"nodeType":"48","messageId":"49","endLine":7,"endColumn":22},{"ruleId":"42","replacedBy":"50"},{"ruleId":"44","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'chemicalsImage' is defined but never used.","Identifier","unusedVar",["52"],["53"],"no-global-assign","no-unsafe-negation"]